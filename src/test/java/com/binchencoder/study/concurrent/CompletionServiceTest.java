package com.binchencoder.study.concurrent;import java.util.Random;import java.util.concurrent.Callable;import java.util.concurrent.CompletionService;import java.util.concurrent.ExecutionException;import java.util.concurrent.ExecutorCompletionService;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import java.util.concurrent.TimeUnit;public class CompletionServiceTest {  public static final ExecutorService executorService = Executors.newCachedThreadPool();  public static final CompletionService<Integer> completionService = new ExecutorCompletionService<>(      executorService);  public static void main(String[] args) {    int threadNum = 2;    for (int i = 1; i <= threadNum; i++) {      final int parentNo = i;      new Thread(() -> {        try {          completionServiceCount(parentNo);        } catch (InterruptedException e) {          e.printStackTrace();        } catch (ExecutionException e) {          e.printStackTrace();        }      }).start();    }  }  /**   * 使用completionService收集callable结果   */  public static void completionServiceCount(int parentNo)      throws InterruptedException, ExecutionException {    int taskNum = 3;    for (int i = 0; i < taskNum; i++) {      completionService.submit(getTask(i, parentNo));    }    Long start = System.currentTimeMillis();    int firstResult = completionService.take().get();    System.out.println(        "Parent thread no: " + parentNo + ", first result(parentNo): " + firstResult            + ", cost time: " + (            System.currentTimeMillis() - start));    int secondResult = completionService.take().get();    System.out.println(        "Parent thread no: " + parentNo + ", second result(parentNo): " + secondResult            + ", cost time: " + (            System.currentTimeMillis() - start));    Future<Integer> thirdFuture = completionService.poll(1000, TimeUnit.MILLISECONDS);    if (null != thirdFuture) {      int thirdResult = thirdFuture.get();      System.out.println(          "Parent thread no: " + parentNo + ", third result(parentNo): " + thirdResult              + ", cost time: " + (              System.currentTimeMillis() - start));    } else {      System.err.println("Parent thread no: " + parentNo + ", third failed!!!");    }//    int sum = 0;//    int temp = 0;//    for (int i = 0; i < threadNo; i++) {//      temp = completionService.take().get();//      sum += temp;//      System.out.print(temp + "\t");//    }//    System.out.println("CompletionService all is : " + sum);    executorService.shutdown();  }  public static Callable<Integer> getTask(final int taskNo, final int parentNo) {    final Random rand = new Random();    Callable<Integer> task = new Callable<Integer>() {      @Override      public Integer call() throws Exception {        int time = rand.nextInt(100) * 100;        Thread.sleep(time);        System.err.println(            "Parent thread no: " + parentNo + ", current task no: " + taskNo + " time is: " + time);        return parentNo;      }    };    return task;  }}